load unification

mod LOGIC-CORE is
    protecting CONVERSION .

    protecting LOGIC-STACK .
    protecting GENERATOR .
    protecting SETS .
    protecting VAR-LIST .

    extending UNIFICATION .

    sorts Instr Block .

    ops call branch goto fail : -> Instr [ctor] .
    ops fresh nonvar isvar unif dif : -> Instr [ctor] .
    ops swap pop rot dup : -> Instr [ctor] .
    ops lt lte add sub mul mod : -> Instr [ctor] .
    op choose : -> Instr [ctor] .
    op chooseDeps : VarList -> Instr [ctor] .
    op v : Qid -> Instr [ctor] .
    op str : String -> Instr [ctor] .
    op lbl : Qid -> Instr [ctor] .
    op int : Int -> Instr [ctor] .
    op nth : Int -> Instr [ctor] .
    op functor : Qid Nat -> Instr [ctor] .

    ops emptyset subset singleton union intersection complement elementof cardinality : -> Instr [ctor] .
    ops intset intrange setdiff : -> Instr [ctor] .

    op nil : -> Instr [ctor] .
    op __ : Instr Instr -> Instr [ctor assoc id: nil] .

    op block_start_end : Qid Instr -> Block [ctor] .
    op nil : -> Block [ctor] .
    op __ : Block Block -> Block [ctor assoc id: nil] .

    sorts BlockMap Configuration .
    op mt : -> BlockMap [ctor] .
    op _|->_ : Qid Block -> BlockMap [ctor] .
    op __ : BlockMap BlockMap -> BlockMap [ctor comm assoc id: mt] .
    eq (L |-> B1) (L |-> B2) = L |-> B1 B2 .

    vars B1 B2 : Block .

    var Unif : Unification .
    var UIt : UnificationItem .
    vars Vars Vars1 Vars2 Vars3 : VarList .

    sort State .
    op nil : -> State [ctor] .
    op state : Instr Unification Stack -> State [ctor] .
    op runGenerator : Qid Generator State -> State [ctor] .
    op runUnif : Instr Unification Stack -> State [ctor] .
    op __ : State State -> State [ctor assoc id: nil] .

    var B Bs Bs1 Bs2 : Block .
    var BM1 BM2 Blocks : BlockMap .
    vars L L1 L2 X Y Z : Qid .
    var I I1 I2 Is : Instr .

    var Str Str1 Str2 : String .

    op [_,_,_] : Nat BlockMap State -> Configuration [ctor] .

    op blocks : Block -> Configuration .
    eq blocks(B) = buildConfig(mt, B) .

    op buildConfig : BlockMap Block -> Configuration .
    eq buildConfig(Blocks, nil) = [0, Blocks, state(lbl('main) goto, mt, nil)] .
    eq buildConfig(Blocks, block L start Is end Bs) = buildConfig(Blocks (L |-> block L start Is end), Bs) .

    var S : Stack .

    var V W : Val .

    vars State States : State .

    var Counter : Nat .

    op makeBlockStates : Block Unification Stack -> State .
    eq makeBlockStates(nil, Unif, S) = nil .
    eq makeBlockStates(block L start Is end Bs, Unif, S) =
        state(Is, Unif, S)
        makeBlockStates(Bs, Unif, S) .

    vars Gen NewGen Gens : Generator .
    crl [generateNew]:
        [ Counter, Blocks, runGenerator(X, Gen, state(Is, Unif, S)) States ]
        =>
        [ Counter, Blocks, runUnif(Is, (X = N) Unif, S) States runGenerator(X, NewGen, state(Is, Unif, S)) ]
        if < NewGen ; N > := next(Gen) .

    --- eq runGenerator(X, nil, State) = nil .
    --- eq runGenerator(X, empty, State) = nil .

    crl [generateDone]:
        [ Counter, Blocks, runGenerator(X, Gen, State) States ]
        =>
        [ Counter, Blocks, States ]
        if done(Gen) .

    rl [goto]:
        [ Counter, (L |-> Bs) Blocks , state(goto, Unif, L S) States ]
        =>
        [ Counter, (L |-> Bs) Blocks , States makeBlockStates(Bs, Unif, S) ] .

    rl [branch]:
        [ Counter, (L1 |-> Bs1) (L2 |-> Bs2) Blocks , state(branch, Unif, L1 L2 S) States ]
        =>
        [ Counter, (L1 |-> Bs1) (L2 |-> Bs2) Blocks , States makeBlockStates(Bs1 Bs2, Unif, S) ] .

    vars N M : Int .
    var Deps : VarList .

    --- Push values
    eq state(int(N) Is, Unif, S) = state(Is, Unif, N S) .
    eq state(str(Str) Is, Unif, S) = state(Is, Unif, s(Str) S) .
    eq state(v(X) Is, Unif, S) = state(Is, Unif, X S) .
    eq state(lbl(L) Is, Unif, S) = state(Is, Unif, L S) .
    eq state(functor(X, N) Is, Unif, S) = state(Is, Unif, func(X, take(N, S)) drop(N, S)) .
    eq state(emptyset Is, Unif, S) = state(Is, Unif, ({} C= universal) S) .
    eq state(intset Is, Unif, S) = state(Is, Unif, (ints C= ints) S) .

    --- Set operations
    eq state(singleton Is, Unif, V S) = state(Is, Unif, ({V} C= universeOf(V)) S) .
    eq state(union Is, Unif, V W S) = state(Is, Unif, (V U W) S) .
    eq state(subset Is, Unif, V W S) = state(Is, Unif, (V C= W) S) .
    eq state(intersection Is, Unif, V W S) = state(Is, Unif, (V intersect W) S) .
    eq state(complement Is, Unif, V S) = state(Is, Unif, complement(V) S) .
    eq state(elementof Is, Unif, V W S) = state(Is, constraint('in, V, W) Unif, S) .
    eq state(cardinality Is, Unif, V S) = state(Is, Unif, | V | S ) .
    eq state(setdiff Is, Unif, V W S) = state(Is, Unif, (V \ W) S ) .
    eq state(intrange Is, Unif, N M S) = state(Is, Unif, (range(N, M) C= ints) S) .

    --- Stack operations
    eq state(swap Is, Unif, V W S) = state(Is, Unif, W V S) .
    eq state(pop Is, Unif, V S) = state(Is, Unif, S) .
    eq state(dup Is, Unif, V S) = state(Is, Unif, V V S) .
    eq state(rot Is, Unif, V W T S) = state(Is, Unif, W T V S) .
    eq state(nth(N) Is, Unif, S) = state(Is, Unif, moveNth(S, N)) .

    --- Value testing
    eq state(isvar Is, Unif, V S) = if isVar(V, Unif) then state(Is, Unif, V S) else nil fi .
    eq state(nonvar Is, Unif, V S) = if not isVar(V, Unif) then state(Is, Unif, V S) else nil fi .

    --- Unification
    eq state(unif Is, Unif, V W S) = runUnif(Is, (V = W) Unif, S) .
    eq state(dif Is, Unif, V W S) = runUnif(Is, (V /= W) Unif, S) .

    --- Control Flow
    eq state(fail Is, Unif, S) = nil .
    eq state(call Is, Unif, func(F, Args) S) = state(lbl(F) goto Is, Unif, Args S) .

    --- Choose
    eq state(choose Is, Unif, X S) = state(chooseDeps(dependencies(X, Unif)) Is, Unif, S) .

    eq runUnif(Is, Unif, S) = doUnif(performUnif(Unif), Is, S) .

    --- Arithmetic
    eq state(add Is, Unif, V W S) = state(Is, Unif, func('add, V W) S) .
    eq state(sub Is, Unif, V W S) = state(Is, Unif, func('sub, V W) S) .
    eq state(mul Is, Unif, V W S) = state(Is, Unif, func('mul, V W) S) .
    eq state(mod Is, Unif, V W S) = state(Is, Unif, func('mod, V W) S) .

    --- Arithmetic tests
    eq state(lt Is, Unif, V W S) = runUnif(Is, constraint('lt, V, W) Unif, S) .
    eq state(lte Is, Unif, V W S) = runUnif(Is, constraint('lte, V, W) Unif, S) .

    rl [fresh]:
        [ Counter, Blocks, state(fresh Is, Unif, S) States ]
        =>
        [ Counter + 1, Blocks, state(Is, Unif, qid(string(Counter, 10)) S) States ] .

    eq chooseDeps(none) = nil .

    rl [chooseDepsGen]:
        [ Counter, Blocks, state(chooseDeps(X : Vars) Is, Unif, S) States ]
        =>
        [ Counter, Blocks, runGenerator(X, makeGenerator(unifToDom(X, Unif)), state(chooseDeps(Vars) Is, Unif, S)) States ] .

    op insertChoose : VarList -> Instr .
    eq insertChoose(none) = nil .
    eq insertChoose(X) = v(X) choose .
    eq insertChoose(X : Vars) = v(X) choose insertChoose(Vars) .

    op dependencies : Stack Unification -> VarList .
    eq dependencies(Vs, Unif) = findDeps(none, Vs, Unif) .

    var Op : Qid .
    var Xs Ys : SimpleSet .

    op findDeps : VarList Stack Unification -> VarList .
    eq findDeps(Vars, nil, Unif) = Vars .

    var Ex : ExInt .

    eq findDeps(Vars, N Vs, Unif) = findDeps(Vars, Vs, Unif) .
    eq findDeps(Vars, s(Str) Vs, Unif) = findDeps(Vars, Vs, Unif) .
    eq findDeps(Vars, Ex Vs, Unif) = findDeps(Vars, Vs, Unif) .

    eq findDeps(Vars, func(F, Args) Vs, Unif) = findDeps(Vars, Vs Args, Unif) .
    eq findDeps(Vars, (Xs C= Ys) Vs, Unif) = findDeps(Vars, Vs asVals(Xs) asVals(Ys), Unif) .

    eq findDeps(Vars, X Vs, (X = T) Unif) = findDeps(Vars, X Vs T, Unif) .
    eq findDeps(Vars, X Vs, (X /= T) Unif) = findDeps(Vars, X Vs T, Unif) .
    eq findDeps(Vars, X Vs, constraint(Op, X, T) Unif) = findDeps(Vars, X Vs T, Unif) .
    eq findDeps(Vars, X Vs, constraint(Op, T, X) Unif) = findDeps(Vars, X Vs T, Unif) .
    eq findDeps(Vars, X Vs, (func(F, Args) = func(G, ArgsF X ArgsG)) Unif) = findDeps(Vars, X Vs Args ArgsF ArgsG, Unif) .
    eq findDeps(Vars, X Vs, (func(F, Args) /= func(G, ArgsF X ArgsG)) Unif) = findDeps(Vars, X Vs Args ArgsF ArgsG, Unif) .
    eq findDeps(Vars, X Vs, constraint(Op, func(F, Args), func(G, ArgsF X ArgsG)) Unif) = findDeps(Vars, X Vs Args ArgsF ArgsG, Unif) .
    eq findDeps(Vars, X Vs, constraint(Op, func(F, ArgsF X ArgsG), func(G, Args)) Unif) = findDeps(Vars, X Vs Args ArgsF ArgsG, Unif) .

    eq findDeps(Vars, X Vs, Unif) = findDeps(X : Vars, Vs, Unif) [owise] .

    vars F G : Qid .
    vars Vs Args : Stack .

    var Fun : Func .
    vars ArgsG ArgsF Ws : Stack .
    var T : Val .

    eq constraint('lt, N, M) = if N < M then mt else failure fi .
    eq constraint('lte, N, M) = if N <= M  then mt else failure fi .

    eq (N = func('add, V M)) = (V = sub(N, M)) .
    eq (N = func('add, M V)) = (V = sub(N, M)) .
    eq (N = func('sub, V M)) = (V = N + M) .
    eq (N = func('sub, M V)) = (V = N + M) .

    ceq constraint(Op, N, func('add, V M)) = constraint(Op, sub(N, M), V) if orderConstraint(Op) .
    ceq constraint(Op, N, func('add, M V)) = constraint(Op, sub(N, M), V) if orderConstraint(Op) .
    ceq constraint(Op, N, func('sub, V M)) = constraint(Op, N + M, V) if orderConstraint(Op) .
    ceq constraint(Op, N, func('sub, M V)) = constraint(Op, N + M, V) if orderConstraint(Op) .
    ceq constraint(Op, func('add, V M), N) = constraint(Op, V, sub(N, M)) if orderConstraint(Op) .
    ceq constraint(Op, func('add, M V), N) = constraint(Op, V, sub(N, M)) if orderConstraint(Op) .
    ceq constraint(Op, func('sub, V M), N) = constraint(Op, V, N + M) if orderConstraint(Op) .
    ceq constraint(Op, func('sub, M V), N) = constraint(Op, V, N + M) if orderConstraint(Op) .

    eq func('add, 0 V) = V .
    eq func('add, V 0) = V .
    eq func('add, N M) = N + M .
    eq func('sub, N M) = sub(N, M) .
    eq func('sub, V 0) = V .
    eq func('sub, V V) = 0 .
    eq func('add, V V) = func('mul, 2 V) .
    eq func('mod, N M) = N rem M .
    eq func('mod, V V) = 0 .
    eq func('mod, 0 V) = 0 .
    eq func('mul, N M) = N * M .
    eq func('mul, 0 W) = 0 .
    eq func('mul, W 0) = 0 .
    eq func('mul, 1 W) = W .
    eq func('mul, W 1) = W .

    vars Q R : Int .
    ceq (N = func('mul, M V)) = if R == 0 then (V = Q) else failure fi
        if R := N rem M /\
           Q := N quo M .
    ceq (N = func('mul, V M)) = if R == 0 then (V = Q) else failure fi
        if R := N rem M /\
           Q := N quo M .

    ceq (constraint(Op, N, func('mul, M V))) = constraint(Op, Q, V)
        if orderConstraint(Op) /\
           R := N rem M /\
           Q := N quo M /\
           R == 0 .
    ceq (constraint(Op, N, func('mul, V M))) = constraint(Op, Q, V)
        if orderConstraint(Op) /\
           R := N rem M /\
           Q := N quo M /\
           R == 0 .
    ceq (constraint(Op, func('mul, M V), N)) = constraint(Op, V, Q)
        if orderConstraint(Op) /\
           R := N rem M /\
           Q := N quo M /\
           R == 0 .
    ceq (constraint(Op, func('mul, V M), N)) = constraint(Op, V, Q)
        if orderConstraint(Op) /\
           R := N rem M /\
           Q := N quo M /\
           R == 0 .

    --- We always have V^2 >= 0
    eq constraint('lte, 0, func('mul, V V)) = mt .
    eq constraint('lt, func('mul, V V), 0) = failure .

    ceq (N = func('mul, V V)) = constraint('in, V, {M ; - M} C= ints)
        if computed(M) := sqrt(N) .

    --- If N is not a square this can't possible work.
    ceq (N = func('mul, V V)) = failure
        if insufficient := sqrt(N) .

    ceq (func(Op, V W) = func(Op, V T)) = (W = T) if cancellable(Op) .
    ceq (func(Op, W V) = func(Op, T V)) = (W = T) if cancellable(Op) .
    ceq (func(Op, V W) = func(Op, T V)) = (W = T) if cancellable(Op) and commutes(Op) .

    var VSet WSet : Subset .

    ceq constraint('in, V, VSet) = mt if V in VSet .
    ceq constraint('in, V, VSet) = failure if not V in VSet .
    eq constraint('in, V, {W} C= Ys) = (V = W) .

    eq constraint('lt, V, M) = constraint('in, V, range(negInf, sub(M, 1)) C= ints) .
    eq constraint('lte, V, M) = constraint('in, V, range(negInf, M) C= ints) .
    eq constraint('lt, N, W) = constraint('in, W, range(N + 1, posInf) C= ints) .
    eq constraint('lte, N, W) = constraint('in, W, range(N, posInf) C= ints) .
    eq constraint('in, V, VSet) constraint('in, V, WSet) = constraint('in, V, VSet intersect WSet) .

    op orderConstraint : Qid -> Bool .
    eq orderConstraint('lt) = true .
    eq orderConstraint('lte) = true .
    eq orderConstraint(X) = false [owise] .

    op isSpecial : Qid -> Bool .
    eq isSpecial('add) = true .
    eq isSpecial('sub) = true .
    eq isSpecial('mul) = true .
    eq isSpecial('mod) = true .
    eq isSpecial('set) = true .
    eq isSpecial(X) = false [owise] .

    op cancellable : Qid -> Bool .
    eq cancellable('add) = true .
    eq cancellable('sub) = true .
    eq cancellable('mul) = true .
    eq cancellable(X) = false [owise] .

    op commutes : Qid -> Bool .
    eq commutes('add) = true .
    eq commutes('mul) = true .
    eq commutes(X) = false [owise] .

    var NewUnif : Unification .

    vars Dom1 Dom2 Dom : Subset .

    op doUnif : Unification Instr Stack -> State .
    eq doUnif(NewUnif, Is, S) =
        if unifPossible(NewUnif)
        then state(Is, NewUnif, S)
        else nil fi .

    --- Stop on the first solution found .
    subsort State < Configuration .
    op <_;_> : State Configuration -> Configuration [ctor frozen] .
    rl [stop]:
        [ Counter, Blocks, state(nil, Unif, S) States ]
        =>
        < state(nil, Unif, S) ; [ Counter, Blocks, States ] > .

    op reachable : Qid Stack Unification -> Bool .
    eq reachable(X, nil, Unif) = false .

    eq reachable(X, N Vs, Unif) = reachable(X, Vs, Unif) .
    eq reachable(X, s(Str) Vs, Unif) = reachable(X, Vs, Unif) .
    eq reachable(X, func(F, Args) Vs, Unif) = reachable(X, Args Vs, Unif) .

    eq reachable(X, X Vs, Unif) = true .

    eq reachable(X, Y Vs, (Y = T) Unif) = reachable(X, Y T Vs, Unif) .
    eq reachable(X, Y Vs, (Y /= T) Unif) = reachable(X, Y T Vs, Unif) .
    eq reachable(X, Y Vs, constraint(Op, Y, T) Unif) = reachable(X, Y T Vs T, Unif) .
    eq reachable(X, Y Vs, constraint(Op, T, Y) Unif) = reachable(X, Y Vs T, Unif) .
    eq reachable(X, Y Vs, (T = func(G, ArgsF Y ArgsG)) Unif) = reachable(X, Y T ArgsF ArgsG Vs, Unif) .
    eq reachable(X, Y Vs, (T /= func(G, ArgsF Y ArgsG)) Unif) = reachable(X, Y T ArgsF ArgsG Vs, Unif) .
    eq reachable(X, Y Vs, constraint(Op, T, func(G, ArgsF Y ArgsG)) Unif) = reachable(X, Y T ArgsF ArgsG Vs, Unif) .
    eq reachable(X, Y Vs, constraint(Op, func(F, ArgsF Y ArgsG), T) Unif) = reachable(X, Y T ArgsF ArgsG Vs, Unif) .

    eq reachable(X, Y Vs, Unif) = reachable(X, Vs, Unif) [owise] .

    ceq state(Is, (X = Y) Unif, S) = state(Is, Unif, S)
        if not reachable(X, S, Unif) .

    crl [garbageCollectMid]:
        [ Counter, Blocks, state(Is, UIt Unif, S) States ]
        =>
        [ Counter, Blocks, state(Is, Unif, S) States ]
        if Vars1 : X : Vars2 := varsOf(UIt) /\
           not reachable(X, S, UIt Unif) .

    var C : Configuration .
    ceq < state(Is, UIt Unif, S) ; C > = < state(Is, Unif, S) ; C >
        if Vars1 : X : Vars2 := varsOf(UIt) /\
           not reachable(X, S, UIt Unif) .
endm

