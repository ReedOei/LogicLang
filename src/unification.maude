load generator

fmod VAR-LIST is
    protecting QID .

    sort VarList .
    subsort Qid < VarList .
    vars Vars Vars1 Vars2 Vars3 : VarList .

    var X : Qid .

    op none : -> VarList [ctor] .
    op _:_ : VarList VarList -> VarList [ctor assoc id: none] .
    eq Vars1 : X : Vars2 : X : Vars3 = Vars1 : X : Vars2 : Vars3 .
endfm

fmod UNIFICATION is
    protecting SETS .
    protecting VAR-LIST .

    sort Unification .
    op mt : -> Unification [ctor] .
    op __ : Unification Unification -> Unification [ctor comm assoc id: mt] .

    sort UnificationItem .
    subsort UnificationItem < Unification .
    op constraint : Qid Val Val -> UnificationItem [ctor] .
    op _=_ : Val Val -> UnificationItem [ctor comm] .
    op _/=_ : Val Val -> UnificationItem [ctor comm] .
    op failure : -> UnificationItem [ctor] .

    var Unif : Unification .
    var UIt : UnificationItem .
    vars As Bs : SimpleSet .
    vars N M : Int .
    vars Str Str1 Str2 : String .
    vars V W T : Val .
    vars Op X Y F G : Qid .
    vars Vs Ws Args ArgsF ArgsG : Stack .

    eq (V = V) = mt .
    eq failure UIt Unif = failure .
    eq s(Str1) = s(Str2) = if Str1 == Str2 then mt else failure fi .
    eq s(Str1) /= s(Str2) = if Str1 =/= Str2 then mt else failure fi .
    eq N = s(Str) = failure .
    eq N /= s(Str) = mt .
    eq N = M = if N == M then mt else failure fi .
    eq N /= M = if N =/= M then mt else failure fi .

    op isVar : Val Unification -> Bool .
    eq isVar(As C= Bs, Unif) = false .
    eq isVar(N, Unif) = false .
    eq isVar(func(F, Args), Unif) = false .
    eq isVar(s(Str), Unif) = false .
    eq isVar(X, (X = V) Unif) = isVar(V, Unif) .
    eq isVar(X, Unif) = true [owise] .

    op varsOf : Unification -> VarList .
    op varsOf : Val -> VarList .
    op varsOf : Stack -> VarList .
    eq varsOf(X) = X .
    eq varsOf(N) = none .
    eq varsOf(s(Str)) = none .
    eq varsOf(func(F, Args)) = varsOf(Args) .
    eq varsOf(nil) = none .
    eq varsOf(V W Vs) = varsOf(V) : varsOf(W Vs) .
    eq varsOf(mt) = none .
    eq varsOf((V = W) Unif) = varsOf(V) : varsOf(W) : varsOf(Unif) .
    eq varsOf((V /= W) Unif) = varsOf(V) : varsOf(W) : varsOf(Unif) .
    eq varsOf(constraint(Op, V, W) Unif) = varsOf(V) : varsOf(W) : varsOf(Unif) .

    op inVars : Qid Unification -> Bool .
    op inVars : Qid Stack -> Bool .
    eq inVars(Y, X) = Y == X .
    eq inVars(Y, N) = false .
    eq inVars(Y, s(Str)) = false .
    eq inVars(Y, func(F, Args)) = inVars(Y, Args) .
    eq inVars(Y, nil) = false .
    eq inVars(Y, V W Vs) = inVars(Y, V) or inVars(Y, W Vs) .
    eq inVars(Y, mt) = false .
    eq inVars(Y, (V = W) Unif) = inVars(Y, V) or inVars(Y, W) or inVars(Y, Unif) .
    eq inVars(Y, (V /= W) Unif) = inVars(Y, V) or inVars(Y, W) or inVars(Y, Unif) .
    eq inVars(Y, constraint(Op, V, W) Unif) = inVars(Y, V) or inVars(Y, W) or inVars(Y, Unif) .

    op makeEqualities : Stack Stack -> Unification .
    eq makeEqualities(nil, nil) = mt .
    eq makeEqualities(V Vs, W Ws) = (V = W) makeEqualities(Vs, Ws) .


    op unifPossible : Unification -> Bool .
    eq unifPossible(mt) = true .
    eq unifPossible(failure Unif) = false .
    eq unifPossible((V /= W) Unif) = not unifPossible(performUnif((V = W) Unif)) .
    eq unifPossible((X = T) Unif) = not inVars(X, T) and unifPossible(Unif) .
    eq unifPossible((func(F, ArgsF) = func(G, ArgsG)) Unif) = isSpecial(F) and isSpecial(G) and unifPossible(Unif) .
    eq unifPossible(UIt Unif) = unifPossible(Unif) [owise] .

    op isSpecial : Qid -> Bool .

    op performUnif : Unification -> Unification .
    ceq performUnif((X = T) Unif) = performUnif((X = T) substitute(X, T, Unif))
        if not inVars(X, T) and notVar(T) and inVars(X, Unif) .
    ceq performUnif((X = Y) Unif) = performUnif((X = Y) substitute(X, Y, Unif))
        if X =/= Y and inVars(X, Unif) and inVars(Y, Unif) .

    --- We can only do this for non-builtin operations (because X + Y = A + B doesn't mean X = A and Y = B)
    ceq performUnif((func(F, ArgsF) = func(F, ArgsG)) Unif) = performUnif(makeEqualities(ArgsF, ArgsG) Unif)
        if not isSpecial(F) .

    var Vals : Stack .
    --- If all the constraints we have guarantee a single value for some variable, just unify the variable with it's single value
    ceq performUnif(Unif) = performUnif((X = V) Unif)
        if (Vs : X : Ws) := varsOf(Unif) /\
           not (inEquation(X, Unif)) /\
           computed(V) := domToVals(unifToDom(X, Unif)) .

    ceq performUnif(Unif) = failure
        if (Vs : X : Ws) := varsOf(Unif) /\
           computed(nil) := domToVals(unifToDom(X, Unif)) .

    eq performUnif(Unif) = Unif [owise] .

    op unifToDom : Qid Unification -> Subset .
    eq unifToDom(X, (X = Y) Unif) = unifToDomVar(Y, Unif) intersect unifToDom(X, Unif) .
    eq unifToDom(X, Unif) = unifToDomVar(X, Unif) [owise] .

    op unifToDomVar : Qid Unification -> Subset .
    eq unifToDomVar(X, mt) = universalsub .
    eq unifToDomVar(X, constraint('lt, X, M) Unif) = (range(negInf, sub(M, 1)) C= ints) intersect unifToDomVar(X, Unif) .
    eq unifToDomVar(X, constraint('lte, X, M) Unif) = (range(negInf, M) C= ints) intersect unifToDomVar(X, Unif) .
    eq unifToDomVar(X, constraint('lt, N, X) Unif) = (range(N + 1, posInf) C= ints) intersect unifToDomVar(X, Unif) .
    eq unifToDomVar(X, constraint('lte, N, X) Unif) = (range(N, posInf) C= ints) intersect unifToDomVar(X, Unif) .
    eq unifToDomVar(X, constraint('in, X, Xs C= Ys) Unif) = (Xs C= Ys) intersect unifToDomVar(X, Unif) .
    eq unifToDomVar(X, (X = N) Unif) = range(N, N) C= ints .
    eq unifToDomVar(X, (X /= N) Unif) = ((range(negInf, sub(N, 1) U range(N + 1, posInf)) C= ints) intersect unifToDomVar(X, Unif)) .
    eq unifToDomVar(X, UIt Unif) = unifToDomVar(X, Unif) [owise] .

    vars Xp Yp : PreSet .
    vars Xs Ys : SimpleSet .

    op substitute : Qid Val Unification -> Unification .
    op substitute : Qid Val Stack -> Stack .
    op substitute : Qid Val Val -> Val .
    eq substitute(X, W, mt) = mt .
    eq substitute(X, W, V = T) = (substitute(X, W, V) = substitute(X, W, T)) .
    eq substitute(X, W, constraint(Op, V, T)) = constraint(Op, substitute(X, W, V), substitute(X, W, T)) .
    eq substitute(X, W, V /= T) = (substitute(X, W, V) /= substitute(X, W, T)) .
    eq substitute(X, W, UIt Unif) = substitute(X, W, UIt) substitute(X, W, Unif) .
    eq substitute(X, W, Y) = if X == Y then W else Y fi .
    eq substitute(X, W, N) = N .
    eq substitute(X, W, s(Str)) = s(Str) .
    eq substitute(X, W, func(F, Args)) = func(F, substitute(X, W, Args)) .
    eq substitute(X, W, (Xs C= Ys)) = setSubstitute(X, W, Xs) C= setSubstitute(X, W, Ys) .
    eq substitute(X, W, nil) = nil .
    eq substitute(X, W, V T Vs) = substitute(X, W, V) substitute(X, W, T Vs) .

    op setSubstitute : Qid Val SimpleSet -> SimpleSet .
    eq setSubstitute(X, W, {}) = {} .
    eq setSubstitute(X, W, {Xp}) = {presubstitute(X,W,Xp)} .
    eq setSubstitute(X, W, Xs U Ys) = setSubstitute(X, W, Xs) U setSubstitute(X, W, Ys) .
    eq setSubstitute(X, W, ints) = ints .
    eq setSubstitute(X, W, universal) = universal .

    vars Low High : ExInt .
    eq setSubstitute(X, W, range(Low, High)) = range(Low, High) .

    op presubstitute : Qid Val PreSet -> PreSet .
    eq presubstitute(X, W, empty) = empty .
    eq presubstitute(X, W, V) = substitute(X, W, V) .
    eq presubstitute(X, W, V ; T ; Xp) = substitute(X, W, V) ; presubstitute(X, W, T ; Xp) .

    op inEquation : Qid Unification -> Bool .
    eq inEquation(X, (X = V) Unif) = true .
    eq inEquation(X, Unif) = false [owise] .
endfm

