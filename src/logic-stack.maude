fmod LOGIC-STACK is
    protecting INT .
    protecting QID .
    protecting STRING .

    sorts Stack Func Val .
    subsort Int < Val .
    subsort Qid < Val .
    subsort Func < Val .
    subsort Val < Stack .

    op func : Qid Stack -> Func [ctor] .

    op s : String -> Val [ctor] .

    op nil : -> Stack [ctor] .
    op __ : Stack Stack -> Stack [ctor assoc id: nil] .

    vars N M Num : Int .
    vars Args Ws Vs S : Stack .
    vars V W NewV NewW : Val .
    vars X Y F G : Qid .
    var Fun : Func .
    var Str : String .

    op take : Nat Stack -> Stack .
    eq take(0, S) = nil .
    eq take(Num, nil) = nil .
    eq take(s(Num), V Vs) = V take(Num, Vs) .

    op drop : Nat Stack -> Stack .
    eq drop(0, S) = S .
    eq drop(Num, nil) = nil .
    eq drop(s(Num), V Vs) = drop(Num, Vs) .

    op length : Stack -> Nat .
    eq length(nil) = 0 .
    eq length(V Vs) = 1 + length(Vs) .

    op notVar : Val -> Bool .
    eq notVar(X) = false .
    eq notVar(Fun) = true .
    eq notVar(N) = true .
    eq notVar(s(Str)) = true .

    sort Computed .
    op computed : Val -> Computed [ctor] .
    op computed : Stack -> Computed [ctor] .
    op insufficient : -> Computed [ctor] .

    vars NewVs NewArgs : Stack .

    op sub : Int Int -> Int .
    --- For some reason it doesn't like N - M (says multiple possible parses)
    eq sub(N, M) = (N + - M) .

    op buildRange : Int Int -> Stack .
    ceq buildRange(N, M) = N buildRange(N + 1, M) if N <= M .
    eq buildRange(N, M) = nil [owise] .

    op moveNth : Stack Int -> Stack .
    eq moveNth(V Vs, 0) = V Vs .
    ceq moveNth(V Vs, s(N)) = W V Ws
         if W Ws := moveNth(Vs, N) .
endfm

