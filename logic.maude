load src/logic-core

mod LOGIC-MACRO is
    protecting LOGIC-CORE .

    var V : Val .
    vars Args Vs : Stack .

    var Str : String .

    var N : Nat .
    vars F X Y Z L : Qid .

    vars I Is : Instr .

    op toInstr : Stack -> Instr .
    eq toInstr(X) = v(X) .
    eq toInstr(N) = int(N) .
    eq toInstr(s(Str)) = str(Str) .
    eq toInstr(func(F, Args)) = toInstr(Args) functor(F, length(Args)) .
    eq toInstr(nil) = nil .
    eq toInstr(V Vs) = toInstr(Vs) toInstr(V) .

    var Vars : VarList .
    op toInstr : VarList -> Instr .
    eq toInstr(none) = nil .
    eq toInstr(X : Vars) = v(X) toInstr(Vars) .

    op doCall : Qid Func -> Instr .
    eq doCall(L, func(F, Args)) =
        lbl(L)
        toInstr(Args)
        lbl(F)
        goto .

    var Fun : Func .
    var Fs : Stack .

    op sequence_start_end : Qid Stack -> Block .
    eq sequence X start Vs end = makeSeq(0, X, Vs) .

    op makeSeq : Nat Qid Stack -> Block .
    eq makeSeq(N, X, nil) = block qid(string(X) + string(N, 10)) start nil end .
    eq makeSeq(N, X, Fun Fs) =
        block qid(string(X) + string(N, 10)) start
            doCall(qid(string(X) + string(N + 1, 10)), Fun)
        end
        makeSeq(N + 1, X, Fs) .

    op query : Instr Stack -> Configuration .
    eq query(Is, Fs) = blocks(
        stdlib
        block 'main start
            toInstr(varsOf(Fs))
            Is
            lbl('mainSeq0)
            goto
        end

        sequence 'mainSeq start
            Fs
        end) .

    op query : Stack -> Configuration .
    eq query(Fs) = blocks(
        stdlib
        block 'main start
            toInstr(varsOf(Fs))
            lbl('mainSeq0)
            goto
        end

        sequence 'mainSeq start
            Fs
        end) .

    op facts : Stack -> Block .
    op factGen : Nat Stack -> Block .

    eq facts(Fs) = factGen(0, Fs) .

    vars B Bs : Block .

    op extractNames : Block -> Stack .
    eq extractNames(nil) = nil .
    eq extractNames(
        block X start
            Is
        end
        Bs) = X extractNames(Bs) .

    eq factGen(N, nil) = nil .
    eq factGen(N, func(F, Args) Fs) =
        block qid(string(F) + string(N, 10)) start
            genUnif(Args)
            goto
        end
        factGen(N + 1, Fs) .

    op genUnif : Stack -> Instr .
    eq genUnif(nil) = nil .
    eq genUnif(V Vs) = toInstr(V) unif genUnif(Vs) .

    var Gs : Stack .
    vars FId GId : Qid .

    op start_either_or_end : Qid Stack Stack -> Block .
    ceq start X either Fs or Gs end =
        block qid(string(X) + "branch") start
            lbl(FId)
            lbl(GId)
            branch
        end
        sequence FId start
            Fs
        end
        sequence GId start
            Gs
        end
        if FId := qid(string(X) + "F0") /\
           GId := qid(string(X) + "G0") .

    op `[_`] : Stack -> Val .
    eq [ nil ] = func('empty, nil) .
    eq [ V Vs ] = func('cons, V [ Vs ]) .

    op stdlib : -> Block .
    eq stdlib =
        block 'nat start
            int(0)
            lte
            goto
        end

        --- Empty case
        block 'length start
            int(0)
            unif
            functor('empty, 0)
            unif
            goto
        end

        --- Var case
        block 'length start
            --- L Xs
            isvar
            swap
            --- Xs L
            fresh
            --- T Xs L
            dup
            rot
            fresh
            functor('cons, 2)
            --- cons(H, T) Xs T L
            unif
            --- T L
            fresh
            --- TailLen T L
            dup
            --- TailLen TailLen T L
            rot
            --- TailLen T TailLen L
            lbl('lengthconsvarend)
            rot
            --- TailLen T 'lengthconsvarend TailLen L
            lbl('length)
            goto
        end

        block 'lengthconsvarend start
            int(1)
            add
            unif
            goto
        end

        --- Nonvar case
        block 'length start
            --- L Xs
            nonvar
            dup
            int(0)
            lt
            --- L Xs
            int(1)
            --- 1 L Xs
            swap
            --- L 1 Xs
            sub

            swap
            --- Xs L1
            fresh
            --- T Xs L1
            dup
            --- T T Xs L1
            rot
            --- T Xs T L1
            fresh
            --- H T Xs T L1
            functor('cons, 2)
            --- cons(H, T) Xs T L1
            unif
            --- T L1

            swap
            --- L1 T
            lbl('length)
            goto
        end

        block 'between start
            --- X Low High
            isvar
            unif
            pop
            goto
        end

        block 'between start
            --- X Low High
            isvar
            swap
            int(1)
            add
            swap
            --- X (Low + 1) High
            lbl('between)
            goto
        end

        block 'between start
            --- X Low High
            nonvar

            dup
            rot
            int(1)
            swap
            sub
            lt

            --- X High
            int(1)
            add
            lt
            goto
        end

        block 'sum start
            --- Res X
            swap
            functor('empty, 0)
            unif
            --- Res
            int(0)
            unif
            goto
        end

        block 'sum start
            --- Res Xs
            swap
            fresh
            --- T Xs Res
            dup
            rot
            --- T Xs T Res
            fresh
            --- H T Xs T Res
            dup
            rot
            --- H T H Xs T Res
            functor('cons, 2)
            --- cons(H, T) H Xs T Res
            swap
            rot
            --- cons(H, T) Xs H T Res
            unif

            --- H T Res
            swap
            fresh
            --- TailSum T H Res
            dup
            rot
            --- TailSum T TailSum H Res
            lbl('sumend)
            rot
            --- TailSum T 'sumend TailSum H Res
            lbl('sum)
            goto
        end

        block 'sumend start
            --- TailSum H Res
            add
            unif
            goto
        end

        block 'range start
            --- List Low High
            rot
            --- Low High List
            swap
            lt
            --- List
            functor('empty, 0)
            --- empty List
            unif
            goto
        end

        block 'range start
            --- List Low High
            rot
            --- Low High List
            dup
            --- Low Low High List
            rot
            --- Low High Low List
            swap
            --- High Low Low List
            dup
            --- High High Low Low List
            rot
            --- High Low High Low List
            swap
            --- Low High High Low List
            lte
            --- High Low List
            rot
            --- Low List High
            dup
            --- Low Low List High
            rot
            --- Low List Low High
            fresh
            --- H Low List Low High
            dup
            rot
            --- H Low H List Low High
            unif
            --- H List Low High
            fresh
            dup
            rot
            --- T H T List Low High
            swap
            functor('cons, 2)
            --- cons(H, T) T List Low High
            rot
            --- T List cons(H, T) Low High
            rot
            --- List cons(H, T) T Low High
            unif
            --- T Low High
            swap
            --- Low T High
            int(1)
            add
            swap
            --- T (Low + 1) High
            lbl('range)
            goto
        end

        block 'in start
            --- X Low High
            dup
            rot
            --- X Low X High
            swap
            lte
            lte
            goto
        end

        block 'choose start
            --- V
            choose
            goto
        end

        block 'even start
            --- N
            fresh
            --- K N
            dup
            --- K K N
            rot
            --- K N K
            dup
            --- K K N K
            add
            --- 2K N K
            unif
            --- K
            lbl('nat)
            goto
        end

        block 'square start
            --- N
            fresh
            --- K N
            dup
            --- K K N
            rot
            --- K N K
            dup
            --- K K N K
            mul
            --- K^2 N K
            unif
            --- K
            lbl('nat)
            goto
        end

        block 'gt start
            swap
            lt
            goto
        end
        .
endm

--- set trace on .
--- set trace eq off .

--- rew query(
---     v('X)
---     int(1)
---     singleton
---     int(2)
---     singleton
---     union
---     v('X)
---     elementof
---     v('X)
---     choose
---     ,
---     nil
--- ) .

rew query(
    func('in, 'X 0 2)
    func('in, 'Y 0 2)
    func('in, 'Z 0 2)
    func('sum, 'N [ 'X 'Y 'Z ])
    func('square, 'N)
    func('gt, 'N 2)
    func('choose, 'N)
) .

--- set trace on .
--- set trace eq off .
--- rew [ 20, mt, state(choose, ('N = func('add, 'Y 'X)) constraint('in, 'X, range(0, 2) C= ints) constraint('in, 'Y, range(0, 2) C= ints) constraint('in, func('add, 'Y 'X), range(1, posInf) C= ints), 'N 'Y 'X) ] .

--- red performUnif((0 = '2) (0 = '4) (0 = '5) (0 = '7) (0 = '8) (0 = 'Y) (0 = 'Z) ('0 = func('cons, 0 func('cons, 0 func('empty, nil)))) ('1 = 'X) ('3 = func('cons, 0 func('empty, nil))) ('6 = func('empty, nil)) ('N = 'X) ('X = func('mul, '11 '11)) constraint('in, '11, range(0, posInf) C= ints) constraint('in, 'X, empty C= ints)) .
--- --- TODO :THERES AN EMPTY AT THE END THAT'S PROBABLY THE ISSUE

