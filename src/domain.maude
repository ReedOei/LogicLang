fmod DOMAIN is
    protecting INT .

    vars N M : Int .

    sort ExInt .
    subsort Int < ExInt .
    ops posInf negInf : -> ExInt [ctor] .
    eq posInf + N = posInf .
    eq negInf + N = negInf .
    eq posInf - N = posInf .
    eq negInf - N = negInf .

    op maxExInt : ExInt ExInt -> ExInt [comm] .
    eq maxExInt(posInf, Low) = posInf .
    eq maxExInt(negInf, High) = High .
    eq maxExInt(N, M) = max(N, M) .

    op minExInt : ExInt ExInt -> ExInt  [comm].
    eq minExInt(posInf, Low) = Low .
    eq minExInt(negInf, High) = negInf .
    eq minExInt(N, M) = min(N, M) .

    sorts Range Domain .
    subsort Range < Domain .
    op range : ExInt ExInt -> Range [ctor] .

    op universal : -> Domain [ctor] .
    op empty : -> Domain [ctor] .
    op _U_ : Domain Domain -> Domain [ctor comm assoc] .

    eq empty U Dom = Dom .
    eq universal U Dom = universal .

    vars Dom Dom1 Dom2 : Domain .
    vars Low High Low1 High1 Low2 High2 : ExInt .

    op complement : Domain -> Domain .
    eq complement(universal) = empty .
    eq complement(empty) = universal .
    eq complement(intersect(Dom1, Dom2)) = complement(Dom1) U complement(Dom2) .
    eq complement(Dom1 U Dom2) = intersect(complement(Dom1), complement(Dom2)) .
    eq complement(range(Low, High)) = range(negInf, Low - 1) U range(High + 1, posInf) .

    eq range(posInf, negInf) = empty .
    eq range(N, negInf) = empty .
    eq range(posInf, M) = empty .
    eq range(negInf, negInf) = empty .
    eq range(posInf, posInf) = empty .
    eq range(negInf, posInf) = universal .
    ceq range(N, M) = empty if N > M .

    vars E1 E2 : ExInt .

    op isLte : ExInt ExInt -> Bool .
    eq isLte(negInf, High) = true .
    eq isLte(Low, posInf) = true .
    eq isLte(N, M) = N <= M .
    eq isLte(E1, E2) = false [owise] .

    ceq range(Low1, High1) U range(Low2, High2) = range(Low1, High2)
        if isLte(Low2, High1) and isLte(Low1, Low2) and isLte(Low1, High1) and isLte(Low2, High2) .

    op intersect : Domain Domain -> Domain [comm assoc] .
    eq intersect(empty, Dom) = empty .
    eq intersect(universal, Dom) = Dom .
    eq intersect(range(Low1, High1), range(Low2, High2)) =
        range(maxExInt(Low1, Low2), minExInt(High1, High2)) .
    eq intersect(Dom, Dom1 U Dom2) = intersect(Dom, Dom1) U intersect(Dom, Dom2) .
endfm

