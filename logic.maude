mod LOGIC is
    --- protecting NAT .
    protecting INT .
    protecting QID .
    protecting STRING .
    protecting CONVERSION .

    sorts Instr Block Func .

    ops call branch goto fail : -> Instr [ctor] .
    ops fresh nonvar isvar unif dif : -> Instr [ctor] .
    ops swap pop rot dup : -> Instr [ctor] .
    ops lt lte add sub : -> Instr [ctor] .
    op lookup : -> Instr [ctor] .
    op v : Qid -> Instr [ctor] .
    op str : String -> Instr [ctor] .
    op lbl : Qid -> Instr [ctor] .
    op int : Int -> Instr [ctor] .
    op functor : Qid Nat -> Instr [ctor] .

    op func : Qid Stack -> Func [ctor] .

    op nil : -> Instr [ctor] .
    op __ : Instr Instr -> Instr [ctor assoc id: nil] .

    op block_start_end : Qid Instr -> Block [ctor] .
    op nil : -> Block [ctor] .
    op __ : Block Block -> Block [ctor assoc id: nil] .

    sorts BlockMap Configuration .
    op mt : -> BlockMap [ctor] .
    op _|->_ : Qid Instr -> BlockMap [ctor] .
    op __ : BlockMap BlockMap -> BlockMap [ctor comm assoc id: mt] .
    op [_,_,_] : Nat BlockMap State -> Configuration [ctor] .

    sorts Stack Unification Val .
    subsort Int < Val .
    subsort Qid < Val .
    subsort Func < Val .
    subsort Val < Stack .
    op s : String -> Val [ctor] .
    op nil : -> Stack [ctor] .
    op __ : Stack Stack -> Stack [ctor assoc id: nil] .

    op mt : -> Unification [ctor] .
    op __ : Unification Unification -> Unification [ctor comm assoc id: mt] .

    sort UnificationItem .
    subsort UnificationItem < Unification .
    op _=_ : Val Val -> UnificationItem [ctor comm] .
    op _/=_ : Val Val -> UnificationItem [ctor comm] .
    op lt : Val Val -> UnificationItem [ctor] .
    op lte : Val Val -> UnificationItem [ctor] .
    op failure : -> UnificationItem [ctor] .

    var U : UnificationItem .

    sort State .
    op nil : -> State [ctor] .
    op state : Instr Unification Stack -> State [ctor] .
    op runUnif : Instr Unification Stack -> State [ctor] .
    op __ : State State -> State [ctor assoc id: nil] .

    var B Bs : Block .
    var BM1 BM2 Blocks : BlockMap .
    vars L L1 L2 X Y : Qid .
    var I I1 I2 Is : Instr .

    var Str Str1 Str2 : String .

    op program : Block -> Configuration .
    eq program(B) = buildConfig(mt, B) .

    op buildConfig : BlockMap Block -> Configuration .
    eq buildConfig(Blocks, nil) = [0, Blocks, state(lbl('main) goto, mt, nil)] .
    eq buildConfig(Blocks, block L start Is end Bs) = buildConfig(Blocks (L |-> Is), Bs) .

    var Unif : Unification .
    var S : Stack .

    var V W : Val .

    var States : State .

    var Counter : Nat .

    rl [goto]:
        [ Counter, (L |-> Is) Blocks , state(goto, Unif, L S) States ]
        =>
        [ Counter, (L |-> Is) Blocks , States state(Is, Unif, S) ] .

    rl [branch]:
        [ Counter, (L1 |-> I1) (L2 |-> I2) Blocks , state(branch, Unif, L1 L2 S) States ]
        =>
        [ Counter, (L1 |-> I1) (L2 |-> I2) Blocks , States state(I1, Unif, S) state(I2, Unif, S) ] .

    rl [var]:
        [ Counter, Blocks, state(v(V) Is, Unif, S) States ]
        =>
        [ Counter, Blocks, States state(Is, Unif, V S) ] .

    rl [lbl]:
        [ Counter, Blocks , state(lbl(L) Is, Unif, S) States ]
        =>
        [ Counter, Blocks , States state(Is, Unif, L S) ] .

    rl [dup]:
        [ Counter, Blocks, state(dup Is, Unif, V S) States ]
        =>
        [ Counter, Blocks, States state(Is, Unif, V V S) ] .

    rl [rot]:
        [ Counter, Blocks, state(rot Is, Unif, V W T S) States ]
        =>
        [ Counter, Blocks, States state(Is, Unif, W T V S) ] .

    rl [pop]:
        [ Counter, Blocks, state(pop Is, Unif, V S) States ]
        =>
        [ Counter, Blocks, States state(Is, Unif, S) ] .

    rl [swap]:
        [ Counter, Blocks, state(swap Is, Unif, V W S) States ]
        =>
        [ Counter, Blocks, States state(Is, Unif, W V S) ] .

    vars N M : Int .
    rl [int]:
        [ Counter, Blocks, state(int(N) Is, Unif, S) States ]
        =>
        [ Counter, Blocks, States state(Is, Unif, N S) ] .

    rl [string]:
        [ Counter, Blocks, state(str(Str) Is, Unif, S) States ]
        =>
        [ Counter, Blocks, States state(Is, Unif, s(Str) S) ] .

    crl [add]:
        [ Counter, Blocks, state(add Is, Unif, V W S) States ]
        =>
        [ Counter + 1, Blocks, States runUnif(Is, (X = func('add, V W)) Unif, X S) ]
        if X := qid(string(Counter, 10)) .

    rl [lookupInt]:
        [ Counter, Blocks, state(lookup Is, Unif, N S) States ]
        =>
        [ Counter, Blocks, States state(Is, Unif, N S) ] .

    rl [lookupFunc]:
        [ Counter, Blocks, state(lookup Is, Unif, func(F, Args) S) States ]
        =>
        [ Counter, Blocks, States state(Is, Unif, S func(F, Args)) ] .

    rl [lookupStr]:
        [ Counter, Blocks, state(lookup Is, Unif, s(Str) S) States ]
        =>
        [ Counter, Blocks, States state(Is, Unif, S s(Str)) ] .

    rl [lookupVarIsInt]:
        [ Counter, Blocks, state(lookup Is, (X = N) Unif, X S) States ]
        =>
        [ Counter, Blocks, States state(Is, (X = N) Unif, N S) ] .

    rl [lookupVarIsFunc]:
        [ Counter, Blocks, state(lookup Is, (X = func(F, Args)) Unif, X S) States ]
        =>
        [ Counter, Blocks, States state(Is, (X = func(F, Args)) Unif, func(F, Args) S) ] .

    rl [lookupVarIsStr]:
        [ Counter, Blocks, state(lookup Is, (X = s(Str)) Unif, X S) States ]
        =>
        [ Counter, Blocks, States state(Is, (X = s(Str)) Unif, s(Str) S) ] .

    rl [lookupIsVar]:
        [ Counter, Blocks, state(lookup Is, (X = Y) Unif, X S) States ]
        =>
        [ Counter, Blocks, States ] .

    crl [sub]:
        [ Counter, Blocks, state(sub Is, Unif, V W S) States ]
        =>
        [ Counter + 1, Blocks, States runUnif(Is, (X = func('sub, V W)) Unif, X S) ]
        if X := qid(string(Counter, 10)) .

    rl [lt]:
        [ Counter, Blocks, state(lt Is, Unif, V W S) States ]
        =>
        [ Counter, Blocks, States runUnif(Is, lt(V, W) Unif, S) ] .

    rl [lte]:
        [ Counter, Blocks, state(lte Is, Unif, V W S) States ]
        =>
        [ Counter, Blocks, States runUnif(Is, lte(V, W) Unif, S) ] .

    rl [fresh]:
        [ Counter, Blocks, state(fresh Is, Unif, S) States ]
        =>
        [ Counter + 1, Blocks, States state(Is, Unif, qid(string(Counter, 10)) S) ] .

    rl [fail]:
        [ Counter, Blocks, state(fail Is, Unif, S) States ]
        =>
        [ Counter, Blocks, States ] .

    rl [isvar]:
        [ Counter, Blocks, state(isvar Is, Unif, V S) States ]
        =>
        [ Counter, Blocks, States if not notVar(V) then state(Is, Unif, S) else nil fi ] .

    rl [nonvar]:
        [ Counter, Blocks, state(nonvar Is, Unif, V S) States ]
        =>
        [ Counter, Blocks, States if notVar(V) then state(Is, Unif, S) else nil fi ] .

    rl [call]:
        [ Counter, Blocks, state(call Is, Unif, func(F, Args) S) States ]
        =>
        [ Counter, Blocks, States state(lbl(F) goto Is, Unif, Args S) ] .

    vars F G : Qid .
    vars Vs Args : Stack .

    op varsOf : Unification -> Stack .
    op varsOf : Val -> Val .
    op varsOf : Stack -> Stack .
    eq varsOf(X) = X .
    eq varsOf(N) = nil .
    eq varsOf(s(Str)) = nil .
    eq varsOf(func(F, Args)) = varsOf(Args) .
    eq varsOf(nil) = nil .
    eq varsOf(V Vs) = varsOf(V) varsOf(Vs) .
    eq varsOf(mt) = nil .
    eq varsOf((V = W) Unif) = varsOf(V) varsOf(W) varsOf(Unif) .
    eq varsOf((V /= W) Unif) = varsOf(V) varsOf(W) varsOf(Unif) .
    eq varsOf(lt(V, W) Unif) = varsOf(V) varsOf(W) varsOf(Unif) .
    eq varsOf(lte(V, W) Unif) = varsOf(V) varsOf(W) varsOf(Unif) .

    var Vars : Stack .
    op _in_ : Val Stack -> Bool .
    eq V in nil = false .
    eq V in (W Vs) = (V == W) or (V in Vs ) .

    var Fun : Func .
    vars ArgsG ArgsF Ws : Stack .
    var T : Val .

    op unifPossible : Unification -> Bool .
    eq unifPossible(mt) = true .
    eq unifPossible(failure Unif) = false .
    eq unifPossible((N = M) Unif) = N == M and unifPossible(Unif) .
    eq unifPossible((s(Str1) = s(Str2)) Unif) = Str1 == Str2 and unifPossible(Unif) .
    eq unifPossible((V /= W) Unif) = not unifPossible(performUnif((V = W) Unif)) .
    eq unifPossible((X = T) Unif) = not (X in varsOf(T)) and unifPossible(Unif) .
    --- If this is left over after peforming unification, then we must have failed because we would decompose if F == G.
    eq unifPossible((func(F, ArgsF) = func(G, ArgsG)) Unif) = false .
    eq unifPossible((N = func(F, Args)) Unif) = false .
    eq unifPossible((N = s(Str)) Unif) = false .
    eq unifPossible((func(F, Args) = s(Str)) Unif) = false .
    eq unifPossible(U Unif) = unifPossible(Unif) [owise] .

    op makeEqualities : Stack Stack -> Unification .
    eq makeEqualities(nil, nil) = mt .
    eq makeEqualities(V Vs, W Ws) = (V = W) makeEqualities(Vs, Ws) .

    op notVar : Val -> Bool .
    eq notVar(X) = false .
    eq notVar(Fun) = true .
    eq notVar(N) = true .
    eq notVar(s(Str)) = true .

    op substitute : Qid Val Unification -> Unification .
    op substitute : Qid Val Stack -> Stack .
    op substitute : Qid Val Val -> Val .
    eq substitute(X, W, mt) = mt .
    eq substitute(X, W, V = T) = (substitute(X, W, V) = substitute(X, W, T)) .
    eq substitute(X, W, lt(V, T)) = lt(substitute(X, W, V), substitute(X, W, T)) .
    eq substitute(X, W, lte(V, T)) = lte(substitute(X, W, V), substitute(X, W, T)) .
    eq substitute(X, W, V /= T) = (substitute(X, W, V) /= substitute(X, W, T)) .
    eq substitute(X, W, U Unif) = substitute(X, W, U) substitute(X, W, Unif) .
    eq substitute(X, W, Y) = if X == Y then W else Y fi .
    eq substitute(X, W, N) = N .
    eq substitute(X, W, s(Str)) = s(Str) .
    eq substitute(X, W, func(F, Args)) = func(F, substitute(X, W, Args)) .
    eq substitute(X, W, nil) = nil .
    eq substitute(X, W, V Vs) = substitute(X, W, V) substitute(X, W, Vs) .

    op performUnif : Unification -> Unification .
    eq performUnif((V = V) Unif) = performUnif(Unif) .
    ceq performUnif((X = T) Unif) = performUnif((X = T) substitute(X, T, Unif))
        if not (X in varsOf(T)) and notVar(T) and X in varsOf(Unif) .
    ceq performUnif((X = Y) Unif) = performUnif((X = Y) substitute(X, Y, Unif))
        if X =/= Y and X in varsOf(Unif) and Y in varsOf(Unif) .
    eq performUnif((func(F, ArgsF) = func(F, ArgsG)) Unif) = performUnif(makeEqualities(ArgsF, ArgsG) Unif) .

    vars NewV NewW : Val .
    ceq performUnif((V = W) Unif) = performUnif((NewV = W) Unif)
        if computed(NewV) := simplify(V) .
    ceq performUnif((V /= W) Unif) = performUnif((NewV /= W) Unif)
        if computed(NewV) := simplify(V) .
    ceq performUnif(lt(V, W) Unif) = performUnif(lt(NewV, W) Unif)
        if computed(NewV) := simplify(V) .
    ceq performUnif(lt(V, W) Unif) = performUnif(lt(V, NewW) Unif)
        if computed(NewW) := simplify(W) .
    ceq performUnif(lte(V, W) Unif) = performUnif(lte(NewV, W) Unif)
        if computed(NewV) := simplify(V) .
    ceq performUnif(lte(V, W) Unif) = performUnif(lte(V, NewW) Unif)
        if computed(NewW) := simplify(W) .

    eq performUnif(lt(N, M) Unif) =
        if N < M then performUnif(Unif) else failure fi .
    eq performUnif(lte(N, M) Unif) =
        if N <= M then performUnif(Unif) else failure fi .

    eq performUnif(Unif) = Unif [owise] .

    sort Computed .
    op computed : Val -> Computed [ctor] .
    op computed : Stack -> Computed [ctor] .
    op insufficient : -> Computed [ctor] .

    vars NewVs NewArgs : Stack .

    op sub : Int Int -> Int .
    --- For some reason it doesn't like N - M (says multiple possible parses)
    eq sub(N, M) = (N + - M) .

    op simplify : Val -> Computed .
    ceq simplify(func(F, Args)) = computed(func(F, NewArgs))
        if computed(NewArgs) := simplifyStack(Args) .
    eq simplify(func('add, N M)) = computed(N + M) .
    eq simplify(func('sub, N M)) = computed(sub(N, M)) .
    eq simplify(V) = insufficient [owise] .

    op simplifyStack : Stack -> Computed .
    ceq simplifyStack(Vs V Ws) = computed(Vs V Ws)
        if computed(NewV) := simplify(V) .
    eq simplifyStack(Vs) = insufficient [owise] .

    var NewUnif : Unification .
    rl [unif]:
        [ Counter, Blocks, state(unif Is, Unif, V W S) States ]
        =>
        [ Counter, Blocks, States runUnif(Is, (V = W) Unif, S) ] .

    rl [dif]:
        [ Counter, Blocks, state(dif Is, Unif, V W S) States ]
        =>
        [ Counter, Blocks, States runUnif(Is, (V /= W) Unif, S) ] .

    crl [runUnif]:
        [ Counter, Blocks, runUnif(Is, Unif, S) States ]
        =>
        [ Counter, Blocks, States if unifPossible(NewUnif) then state(Is, NewUnif, S) else nil fi ]
        if NewUnif := performUnif(Unif) .

    var Num : Nat .
    op take : Nat Stack -> Stack .
    eq take(0, S) = nil .
    eq take(Num, nil) = nil .
    eq take(s(Num), V Vs) = V take(Num, Vs) .

    op drop : Nat Stack -> Stack .
    eq drop(0, S) = S .
    eq drop(Num, nil) = nil .
    eq drop(s(Num), V Vs) = drop(Num, Vs) .

    rl [functor]:
        [ Counter, Blocks, state(functor(X, N) Is, Unif, S) States ]
        =>
        [ Counter, Blocks, States state(Is, Unif, func(X, take(N, S)) drop(N, S)) ] .

    --- Stop on the first solution found .
    subsort State < Configuration .
    rl [stop]:
        [ Counter, Blocks, state(nil, Unif, S) States ]
        =>
        state(nil, Unif, S) States .

    op reachable : Qid Unification Stack -> Bool .
    ceq reachable(X, Unif, Vs Y Ws) = true if reachableFrom(X, Y, Unif) .
    ceq reachable(X, Unif, Vs func(F, Args) Ws) = true
        if reachable(X, Unif, Args) .
    eq reachable(X, Unif, S) = false [owise] .

    op reachableFrom : Qid Qid Unification -> Bool .
    ceq reachableFrom(X, Y, (Y = V) Unif) = true if reachable(X, Unif, V) .
    ceq reachableFrom(X, Y, (Y /= V) Unif) = true if reachable(X, Unif, V) .
    ceq reachableFrom(X, Y, lt(Y, V) Unif) = true if reachable(X, Unif, V) .
    ceq reachableFrom(X, Y, lt(V, Y) Unif) = true if reachable(X, Unif, V) .
    ceq reachableFrom(X, Y, lte(Y, V) Unif) = true if reachable(X, Unif, V) .
    ceq reachableFrom(X, Y, lte(V, Y) Unif) = true if reachable(X, Unif, V) .
    eq reachableFrom(X, X, Unif) = true .
    eq reachableFrom(X, Y, Unif) = false [owise] .

    crl [garbageCollectMid]:
        [ Counter, Blocks, state(Is, (X = V) Unif, S) States ]
        =>
        [ Counter, Blocks, state(Is, Unif, S) States ]
        if not reachable(X, Unif, S) .

    crl [garbageCollectEnd]:
        state(Is, (X = V) Unif, S)
        =>
        state(Is, Unif, S)
        if not reachable(X, Unif, S) .
endm

mod LOGIC-MACRO is
    protecting LOGIC .

    var V : Val .
    vars Args Vs : Stack .

    var Str : String .

    var N : Nat .
    vars F X L : Qid .

    op length : Stack -> Nat .
    eq length(nil) = 0 .
    eq length(V Vs) = 1 + length(Vs) .

    op toInstr : Stack -> Instr .
    eq toInstr(X) = v(X) .
    eq toInstr(N) = int(N) .
    eq toInstr(s(Str)) = str(Str) .
    eq toInstr(func(F, Args)) = toInstr(Args) functor(F, length(Args)) .
    eq toInstr(nil) = nil .
    eq toInstr(V Vs) = toInstr(Vs) toInstr(V) .

    op doCall : Qid Func -> Instr .
    eq doCall(L, func(F, Args)) =
        lbl(L)
        toInstr(func(F, Args))
        call .

    var Fun : Func .

    op query : Stack Func -> Block .
    eq query(Vs, Fun) =
        block 'main start
            toInstr(Vs)
            doCall('end, Fun)
        end
        block 'end start
            nil
        end
        .

    op facts : Stack -> Block .
    op factGen : Nat Stack -> Block .

    var Fs : Stack .

    eq facts(Fs) = factGen(0, Fs) .

    eq factGen(N, nil) = nil .
    eq factGen(N, func(F, Args) Fs) =
        block qid(string(F) + string(N, 10)) start
            genUnif(Args)
            goto
        end
        factGen(N, Fs) .

    op genUnif : Stack -> Instr .
    eq genUnif(nil) = nil .
    eq genUnif(V Vs) = toInstr(V) unif genUnif(Vs) .
endm

--- set trace on .
--- red performUnif(('1 = func('empty, nil)) ('2 = 1) ('X = func('cons, 0 func('empty, nil))) lt(10, '2)) .
rew program(
query('X 'Total, func('range, 'X 0 10))

facts(func('age, s("reed") 21))

block 'length start
    lbl('lengthempty)
    lbl('lengthcons)
    branch
end

block 'lengthempty start
    int(0)
    unif
    functor('empty, 0)
    unif
    goto
end

block 'lengthcons start
    lbl('lengthconsvar)
    lbl('lengthconsground)
    branch
end

block 'lengthconsvar start
    --- L Xs
    dup
    isvar
    swap
    --- Xs L
    fresh
    --- T Xs L
    dup
    rot
    fresh
    functor('cons, 2)
    --- cons(H, T) Xs T L
    unif
    --- T L
    fresh
    --- TailLen T L
    dup
    --- TailLen TailLen T L
    rot
    --- TailLen T TailLen L
    lbl('lengthconsvarend)
    rot
    --- TailLen T 'lengthconsvarend TailLen L
    lbl('length)
    goto
end

block 'lengthconsvarend start
    int(1)
    add
    unif
    goto
end

block 'lengthconsground start
    dup
    nonvar
    dup
    int(0)
    lt
    int(1)
    swap
    sub

    swap
    fresh
    dup
    rot
    fresh
    functor('cons, 2)
    unif

    swap
    lbl('length)
    goto
end

block 'between start
    --- X Low High
    lbl('betweenvar)
    lbl('betweennonvar)
    branch
end

block 'betweenvar start
    --- X Low High
    dup
    isvar
    lbl('betweenvarlow)
    lbl('betweenvarhigh)
    branch
end

block 'betweenvarlow start
    --- X Low High
    unif
    pop
    goto
end

block 'betweenvarhigh start
    --- X Low High
    swap
    int(1)
    add
    swap
    --- X (Low + 1) High
    lbl('between)
    goto
end

block 'betweennonvar start
    --- X Low High
    dup
    nonvar

    dup
    rot
    int(1)
    swap
    sub
    lt

    --- X High
    int(1)
    add
    lt
    goto
end

block 'sum start
    lbl('sumempty)
    lbl('sumcons)
    branch
end

block 'sumempty start
    --- Res X
    swap
    functor('empty, 0)
    unif
    --- Res
    int(0)
    unif
    goto
end

block 'sumcons start
    --- Res Xs
    swap
    fresh
    --- T Xs Res
    dup
    rot
    --- T Xs T Res
    fresh
    --- H T Xs T Res
    dup
    rot
    --- H T H Xs T Res
    functor('cons, 2)
    --- cons(H, T) H Xs T Res
    swap
    rot
    --- cons(H, T) Xs H T Res
    unif

    --- H T Res
    swap
    fresh
    --- TailSum T H Res
    dup
    rot
    --- TailSum T TailSum H Res
    lbl('sumend)
    rot
    --- TailSum T 'sumend TailSum H Res
    lbl('sum)
    goto
end

block 'sumend start
    --- TailSum H Res
    add
    unif
    goto
end

block 'range start
    --- List Low High
    lbl('rangezero)
    lbl('rangenonzero)
    branch
end

block 'rangezero start
    --- List Low High
    rot
    --- Low High List
    swap
    lt
    --- List
    functor('empty, 0)
    --- empty List
    unif
    goto
end

block 'rangenonzero start
    --- List Low High
    rot
    --- Low High List
    dup
    --- Low Low High List
    rot
    --- Low High Low List
    swap
    --- High Low Low List
    dup
    --- High High Low Low List
    rot
    --- High Low High Low List
    swap
    --- Low High High Low List
    lte
    --- High Low List
    rot
    --- Low List High
    dup
    --- Low Low List High
    rot
    --- Low List Low High
    fresh
    --- H Low List Low High
    dup
    rot
    --- H Low H List Low High
    unif
    --- H List Low High
    fresh
    dup
    rot
    --- T H T List Low High
    swap
    functor('cons, 2)
    --- cons(H, T) T List Low High
    rot
    --- T List cons(H, T) Low High
    rot
    --- List cons(H, T) T Low High
    unif
    --- T Low High
    swap
    --- Low T High
    int(1)
    add
    swap
    --- T (Low + 1) High
    lbl('range)
    goto
end

) .

